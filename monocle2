library(monocle3, lib.loc = "/home/majiao/miniconda3/envs/monocle3/lib/R/library")
library(Seurat)
library(leidenbase)
library(ggplot2)
Tcell <- readRDS("~/Program/Singlecell_Gastric/Tcell.rds")
data <- GetAssayData(onlyepi, assay = 'RNA', slot = 'counts')
cell_metadata <- onlyepi@meta.data
gene_annotation <- data.frame(gene_short_name = rownames(data))
rownames(gene_annotation) <- rownames(data)
cds <- new_cell_data_set(data,
                         cell_metadata = cell_metadata,
                         gene_metadata = gene_annotation)

cds <- preprocess_cds(cds, num_dim = 50)

cds <- reduce_dimension(cds,preprocess_method = "PCA", reduction_method = "UMAP") #preprocess_method默认是PCA
cds <- cluster_cells(cds, reduction_method = "UMAP")

cds.embed <- cds@int_colData$reducedDims$UMAP
int.embed <- Embeddings(onlyepi, reduction = "umap")
int.embed <- int.embed[rownames(cds.embed),]
cds@int_colData$reducedDims$UMAP <- int.embed

cds <- learn_graph(cds)
saveRDS(cds, "onlyepi.rds")

Clustercolor <- c("#334f65" ,"#b3974e",
                  "#38cb7d" ,"#ddae33" ,"#844bb3" ,"#93c555" ,"#5f6694" ,"#df3881",
                  "#0780cf" ,"#765005" ,"#fa6d1d" ,"#0e2c82" ,"#b6b51f" ,"#da1f18",
                  "#701866" ,"#f47a75" ,"#009db2" ,"#024b51" ,"#63b2ee" ,"#76da91",
                  "#f8cb7f" ,"#f89588" ,"#7cd6cf" ,"#9192ab" ,"#79CDCD" ,"#45a776" ,"#f05326" ,"#eed777"
)


library(magrittr)
pData(cds) %>% View()

p = plot_cells(cds, color_cells_by = "cell_type", label_cell_groups = F, label_groups_by_cluster=FALSE,
               label_leaves=FALSE, label_branch_points=FALSE)+
  scale_colour_manual(values = Clustercolor)+
  theme_bw()+
  labs(title = "", fill = "Celltype")+
  xlab("UMAP_1")+
  ylab("UAMP_2")+
  theme(legend.title=element_blank())+
  theme(axis.text=element_text(family = "Arial", size=13, face = "bold"), # 坐标轴刻度
        axis.title=element_text(family = "Arial", size=13, face="bold"), # 坐标轴标题
        panel.border = element_rect(fill=NA,color="black", size=1, linetype="solid"), # 调整坐标轴边框的粗细
        panel.background = element_blank(), #去除背景
        panel.grid=element_blank(), #去除网格线
        axis.title.x = element_text(margin = margin(t = 0.4, unit = "cm")),
        axis.title.y = element_text(margin = margin(t = 0, r = 0.4, b = 0, l = 0, unit = "cm")))
        
cds <- order_cells(cds)
        
p = plot_cells(cds, color_cells_by = "pseudotime", label_cell_groups = FALSE, 
               label_leaves = FALSE,  label_branch_points = FALSE)+
  xlab("UMAP_1")+
  ylab("UAMP_2")+
  theme(legend.title=element_blank())+
  theme(axis.text=element_text(family = "Arial", size=13, face = "bold"), # 坐标轴刻度
        axis.title=element_text(family = "Arial", size=13, face="bold"), # 坐标轴标题
        panel.border = element_rect(fill=NA,color="black", size=1, linetype="solid"), # 调整坐标轴边框的粗细
        panel.background = element_blank(), #去除背景
        panel.grid=element_blank(), #去除网格线
        axis.title.x = element_text(margin = margin(t = 0.4, unit = "cm")),
        axis.title.y = element_text(margin = margin(t = 0, r = 0.4, b = 0, l = 0, unit = "cm")))        
        





#2.创建CellDataSet:
library(monocle)
library(tidyverse)
library(Seurat)
###导入注释好的seurat对象（已注释）
epi <- readRDS("/home/majiao/epi.rds")

###过滤掉不需要的细胞
epi@meta.data$del <- "cell"
delcell <- c("T Cells", "B Cells", "Stromal Cells", "Innate Lymphoid Cells")
n <- which(epi@meta.data$cell_type %in% delcell)
epi@meta.data$del[n] <- "del"
onlyepi <- subset(epi, subset = del == "cell")

###提取表型信息--细胞信息（建议载入细胞的聚类或者细胞类型鉴定信息、实验条件信息）
expr_matrix <- as(as.matrix(onlyepi@assays$RNA@counts),'sparseMatrix')
###提取表型信息到p_data(phenotype_data)里面
p_data <- onlyepi@meta.data
###整合每个细胞的细胞鉴定信息到p_data里面。
p_data$cell_type <- onlyepi@active.ident
###提取基因信息：如生物类型、gc含量等
f_data <- data.frame(gene_short_name = row.names(onlyepi),row.names = row.names(onlyepi))
###expr_matrix的行数与f_data的行数相同（gene number),expr_matrix的列数与p_data的行数相同（cell number)


###构建CDS对象:
pd <- new('AnnotatedDataFrame',data = p_data)
fd <- new('AnnotatedDataFrame',data = f_data)
###将p_data和f_data从data.frame转换AnnotatedDataFrame对象。
cds <- newCellDataSet(expr_matrix,
                      phenoData = pd,
                      featureData = fd,
                      lowerDetectionLimit = 0.5,
                      expressionFamily = negbinomial.size())

#3.估计size factor和离散度
cds <- estimateSizeFactors(cds)
cds <- estimateDispersions(cds)

#4.过滤低质量的细胞
###在fData(cds)中添加一列num_cells_expressed
cds <- detectGenes(cds,min_expr = 0.1)
print(head(fData(cds)))
###过滤掉在小于10个细胞中表达的基因
expressed_genes <- row.names(subset(fData(cds),num_cells_expressed >=10))

使用monocle选择的高变基因
disp_table <- dispersionTable(cds)
disp.genes <- subset(disp_table, mean_expression >= 0.1 & dispersion_empirical >= 1 * dispersion_fit)$gene_id 
cds <- setOrderingFilter(cds, disp.genes)
plot_ordering_genes(cds)


diff <- differentialGeneTest(cds[expressed_genes,],fullModelFormulaStr = "cell_type",cores = 1)

###差异表达基因作为轨迹构建的基因，差异基因的选择标准是qval <0.01，decreasing = F表示按数值增加排序
deg <- subset(diff,qval <0.01)
deg <- deg[order(deg$qval,decreasing = F),]
head(deg)

###差异基因的结果文件保存
write.table(deg,file = "onlyepi.monocle.DEG.xls",
            col.names = TRUE,
            row.names = FALSE,
            sep = "\t",
            quote = FALSE)

###轨迹构建基因可视化
ordergene <- rownames(deg)
cds <- setOrderingFilter(cds,ordergene)


p1 <- plot_ordering_genes(cds)
ggsave(pl, "cds.pdf", width = 5)


###降维
cds <- reduceDimension(cds,max_components = 2,method = 'DDRTree')
saveRDS(cds, "monocle_cds.RDS")
cds <- orderCells(cds)
###使用root_state参数可以设置拟时间轴的根
cds <- orderCells(cds,root_state=5)


####以pseudotime值上色（Pseudotime是monocle2基于细胞基因表达信息计算的概率，表示时间的先后）
p2 <- plot_cell_trajectory(cds,color_by = "Pseudotime",size=1,show_backbone = TRUE)
ggsave(p2,"epi.monocle.pseudotime.pdf",width = 7,height = 5)

###以细胞类型上色
p3 <- plot_cell_trajectory(cds,color_by = "cell_type",size=1,show_backbone = TRUE)
ggsave(p3,"epi.monocle.celltype.pdf",width = 7,height = 5)

###以细胞状态上色
p4 <- plot_cell_trajectory(cds,color_by = "State",size = 1,show_backbone = TRUE)
ggsave(p4,"epi.monocle.state.pdf",width = 7,height = 5)

###按seurat分群排序细胞
p5 <- plot_cell_trajectory(cds,color_by = "seurat_clusters")
ggsave(p5,"epi.monocle.seurat.clusters.pdf",width = 7,heitht = 5)

###以细胞状态上色（拆分）“分面”轨迹图，以便更容易地查看每个状态的位置
p6 <- plot_cell_trajectory(cds,color_by = "State") + facet_wrap("~State",nrow = 1)
ggsave("epi.monocle.state.faceted.pdf",width = 10,height = 7)




###提取感兴趣的细胞，进行后续分析（比如对state7的细胞感兴趣）：
pdata <- Biobase::pData(cds)
s.cells <- subset(pdata,State=="7") %>% rownames()
save(s.cells,file = "monocle_state7.rda")

write.csv(pData(cds),"pseudotime.csv")
save(cds,file = "cds.rda")



###指定基因的可视化，直接查看一些基因随细胞状态等的表达变化：
keygenes <- head(ordergene,4)
cds_subset <- cds[keygenes,]
#可视化：以state/celltype/pseudotime进行
p1 <- plot_genes_in_pseudotime(cds_subset ,color_by = "State")
p2 <- plot_genes_in_pseudotime(cds_subset,color_by = "cell_type")
p3 <- plot_genes_in_pseudotime(cds_subset,color_by = "Pseudotime")

plotc <- p1|p2|p3
ggsave("genes_pseudotimeplot.pdf",plot = plotc,width = 16,height = 8)

#指定基因
s.genes <- c("SELL","CCR7","IL7R", "CD84","CCL5","S100A4")
p1 <- plot_genes_jitter(cds[s.genes,], grouping = "State", color_by = "State")
p2 <- plot_genes_violin(cds[s.genes,], grouping = "State", color_by = "State")
p3 <- plot_genes_in_pseudotime(cds[s.genes,], color_by = "State")
plotc <- p1|p2|p3
ggsave("Genes_Jitterplot.pdf", plot = plotc, width = 16, height = 8)


###寻找拟时相关的基因（拟时差异基因）
#这里是把排序基因（ordergene）提取出来做回归分析，来找它们是否跟拟时间有显著的关系
#如果不设置，就会用所有基因来做它们与拟时间的相关性

Time_diff <- differentialGeneTest(cds[ordergene,],cores = 1,
                                  fullModelFormulaStr = "~sm.ns(Pseudotime)")
Time_diff <- Time_diff[,c(5,2,3,4,1,6,7)]

#拟时差异基因热图绘制（提取前100个）
Time_diff <- top_n(Time_diff,n=100,desc(qval)) %>% pull(gene_short_name) %>%as.character()
p1 <- plot_pseudotime_heatmap(cds[Time_genes,],num_clusters = 4,show_rownames = TRUE,return_heatmap = TRUE)
ggsave("time_heatmap_pdf",p1,width = 5,height = 10)

        
        
