library(scater)
library(Seurat)
library(tidyverse)
library(cowplot)
library(Matrix.utils)
library(edgeR)
library(dplyr)
library(magrittr)
library(Matrix)
library(purrr)
library(reshape2)
library(S4Vectors)
library(tibble)
library(SingleCellExperiment)
library(pheatmap)
library(apeglm)
library(png)
library(DESeq2)
library(RColorBrewer)
library(ggrepel)
#从单细胞分析工作流程结束时创建的seurat对象中提取子集和细胞
seurat <- readRDS("/home/majiao/DESeq2/ColonEpi.rds")
seurat <- subset(seurat, subset=status!='noninflamed')
counts <- seurat@assays$RNA@counts
metadata <- seurat@meta.data
metadata$cluster_id <- factor(seurat@active.ident)
sce <-SingleCellExperiment(assays = list(counts = counts),colData = metadata)
groups <- colData(sce)[,c("cluster_id","samples")]

#获取样本中细胞间聚合的必要指标
kids <- purrr::set_names(levels(sce$cluster_id))
kids
nk <- length(kids)
nk

sids <- unique(sce$samples)
ns <- length(sids)
ns

n_cells <- as.numeric(table(sce$samples))
m <- match(sids,sce$samples)

ei <- data.frame(colData(sce)[m,],n_cells,row.names = NULL)%>%select(-"cluster_id")

##
groups <- colData(sce)[,c("cluster_id","samples")]
pb <- aggregate.Matrix(t(counts(sce)),
                       groupings = groups,fun = "sum")
class(pb)
dim(pb)
pb[1:6,1:6]

#确定每种细胞类型存在哪些样本
splitf <- sapply(stringr::str_split(rownames(pb),pattern = "_",n=2),
                 `[`,1)

pb <- split.data.frame(pb,factor(splitf))%>%
  lapply(function(u)
    set_colnames(t(u),
                 stringr::str_extract(rownames(u),"(?<=_)[:alnum:]+")))

class(pb)

str(pb)

#检查每个细胞的样本计数
options(width = 100)
table(sce$cluster_id,sce$status)

#将为每个细胞类型群集创建一个样本名称组合向量
get_sample_ids <- function(x){
  pb[[x]] %>%
    colnames()
}
de_samples <- map(1:length(kids),get_sample_ids)%>%unlist()

#获得与向量中的每个样本相对应的群集ID
samples_list <- map(1:length(kids),get_sample_ids)

get_cluster_ids <- function(x){
  rep(names(pb)[x],
      each = length(samples_list[[x]]))
}

de_cluster_ids <- map(1:length(kids),get_cluster_ids)%>%
  unlist()

#使用集群ID和相应的样本ID创建一个数据库，把状态信息合并在一起

gg_df <- data.frame(cluster_id=de_cluster_ids,
                    samples =de_samples)
gg_df <- left_join(gg_df,ei[,c("samples","status")])
metadata <- gg_df %>%dplyr::select(cluster_id,samples,status)

metadata

#对感兴趣的群取子集
clusters <- unique(metadata$cluster_id)
clusters
clusters[3]

#使用此输出对colonocytes细胞运行DE分析。首先，我们可以仅将元数据和技术设置为colonocytes细胞：
cluster_metadata <- metadata[which(metadata$cluster_id==clusters[3]),]
head(cluster_metadata)

rownames(cluster_metadata) <- cluster_metadata$samples
head(cluster_metadata)

counts <- pb[[clusters[3]]]
cluster_counts <- data.frame(counts[,which(colnames(counts) %in% rownames(cluster_metadata))])

all(rownames(cluster_metadata) == colnames(cluster_counts))
cluster_counts1 <- round(cluster_counts)
#创建DESeq对象
dds <- DESeqDataSetFromMatrix(cluster_counts1,
                              colData = cluster_metadata,
                              design = ~status)

#过滤低丰度数据

dds <- dds[rowSums(counts(dds))>1,]

#PCA
rld <- rlog(dds,blind = TRUE)
DESeq2::plotPCA(rld,intgroup = "samples")

rld_mat <- assay(rld)
rld_cor <- cor(rld_mat)
pheatmap(rld_cor,annotation = cluster_metadata[,c("samples"),drop = FALSE])

#Running DESeq2
dds <- DESeq(dds)
dds <- nbinomWaldTest(dds)
plotDispEsts(dds)


#将几组进行比较

res <- results(dds,contrast = c("status","healthy","inflamed"),alpha = 0.05)
res <- lfcShrink(dds,contrast =  c("status","healthy","inflamed"),res = res)
resApe <-lfcShrink(dds, coef=2,type="apeglm")
resLFC <- lfcShrink(dds, coef=2)

##所有基因的结果表
res_tb1 <- resApe %>%
  data.frame()%>%
  rownames_to_column(var = "gene")%>%
  as_tibble()

res_tb1

write.csv(res_tb1,file = "123")

##显著基因结果表
padj_cutoff <- 0.05
sig_res <- dplyr::filter(res_tb1,pvalue < padj_cutoff)%>%
  dplyr::arrange(pvalue)
sig_res

write.csv(sig_res,file = "B cells HVSI",quote = FALSE,row.names = FALSE)

#top20最显著基因归一化表达散点图
normalized_counts <- counts(dds,normalized = TRUE)

top20_sig_genes <- sig_res %>%
  dplyr::arrange(padj)%>%
  dplyr::pull(gene)%>%
  head(n=20)

top20_sig_norm <- data.frame(normalized_counts) %>%
  rownames_to_column(var = "gene") %>%
  dplyr::filter(gene %in% top20_sig_genes)

gathered_top20_sig <- top20_sig_norm %>%
  gather(colnames(top20_sig_norm)[2:length(colnames(top20_sig_norm))],
         key = "samplename",value = "normalized_counts")

gathered_top20_sig <- inner_join(ei[,c("samples","status")],
                                 gathered_top20_sig,
                                 by = c("samples" = "samplename"))

ggplot(gathered_top20_sig) + 
  geom_point(aes(x=gene,
                 y=normalized_counts,
                 color = status),
             position = position_jitter(w=0.1,h=0))+
  scale_y_log10()+
  xlab("Genes")+
  ylab("log10 Normalized Counts")+
  theme_bw()+
  theme(axis.text.x = element_text(angle = 45,hjust = 1))+
  theme(plot.title = element_text(hjust = 0.5))

#利用热图探索显著基因的聚集性
sig_norm <- data.frame(normalized_counts) %>%
  rownames_to_column(var = "gene") %>%
  dplyr::filter(gene %in% sig_res$gene)

pheatmap(sig_norm[,2:length(colnames(sig_norm))],
         color = colorRampPalette(c("#8854d0","#ffffff","#fa8231"))(100),
         legend_breaks = c(-2,0,2),
         cluster_rows = TRUE,
         cluster_cols = FALSE,
         show_rownames = FALSE,
         annotation = cluster_metadata[,c("status","cluster_id")],
         border_color = NA,
         fontsize = 10,
         scale = "row",
         fontsize_row = 10,
         height = 20)

#结果的火山图

res_tb1 <- na.omit(res_tb1)
cut_off_pvalue <- 0.05
cut_off_logFC <- 1
res_tb1$change <- ifelse(res_tb1$pvalue<cut_off_pvalue & 
                                   abs(res_tb1$log2FoldChange)>=0,
                                 ifelse(res_tb1$log2FoldChange>0,'Up','Down'),
                                 'Stable')

p <- ggplot(#设置数据
  res_tb1,
       aes(x = log2FoldChange,
           y = -log10(pvalue),
           colour = change)) +
  geom_point(alpha = 0.4,size = 3.5)+
  scale_color_manual(values = c("#546de5","#d2dae2","#ff4757"))+
  #辅助线
  geom_vline(xintercept = c(-1,1),lty=4,col="black",lwd=0.8)+
  geom_hline(yintercept = -log10(cut_off_pvalue),lty=4,col="black",lwd=0.8)+
  #坐标轴
  labs(x = "log2(fold change)",
       y = "-log10 (pvalue)")+
  theme_bw()+
  #图例
  theme(plot.title = element_text(hjust = 0.5),
        legend.position = "right",
        legend.title = element_blank())

res_tb1$label <- ifelse(res_tb1$pvalue < cut_off_pvalue & 
                                  abs(res_tb1$log2FoldChange) >= 3,
                                as.character(res_tb1$gene),"")

p+geom_text_repel(data = res_tb1,aes(x = res_tb1$log2FoldChange,
                                             y = -log10(res_tb1$pvalue),
                                             label = label),
                  size = 3,box.padding = unit(0.5,"lines"),
                  point.padding = unit(0.8,"lines"),
                  segment.color = "black",
                  show.legend = FALSE)



ggplot(res_tb1)+geom_point(aes(x=log2FoldChange,
                               y=-log10(pvalue)))+
  ggtitle("Volcano plot of colonocytes")+
  xlab("log2 fold change")+
  ylab("-log10 pvalue")+
  scale_y_continuous(limits = c(0,10))+
  theme(legend.position = "none",
        plot.title = element_text(size = rel(1.5),hjust = 0.5),
        axis.title = element_text(size = rel(1.25)))





write.table(sig_res,file="markers.xls",sep="\t",row.names=FALSE,quote=FALSE)

