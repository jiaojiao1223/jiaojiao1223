#seurat分析工作结束后提取子集和细胞
seurat <- readRDS("/home/majiao/DESeq2/ColonEpi.rds")
seurat <- subset(seurat, subset=status!='noninflamed')
counts <- seurat@assays$RNA@counts
metadata <- seurat@meta.data
metadata$cluster_id <- factor(seurat@active.ident)
sce <-SingleCellExperiment(assays = list(counts = counts),colData = metadata)
groups <- colData(sce)[,c("cluster_id","samples")]

#data handling
library(dplyr)
library(magrittr)
library(Matrix)
library(purrr)
library(reshape2)
library(S4Vectors)
library(tibble)

#visualzation
library(ComplexHeatmap)
library(ggplot2)
library(pheatmap)
library(scales)



#data preparation


colData(sce) %>% 
  as.data.frame %>% 
  transmute(
    group_id = status, 
    sample_id = samples,
    cluster_id =  cluster_id) %>%
  mutate_all(as.factor) %>% 
  set_rownames(colnames(sce)) %>% 
  DataFrame -> colData(sce)

head(colData(sce))

#确定数据集中存在的群集数量和群集名称
nk <- length(kids <- set_names(levels(sce$cluster_id)))
ns <- length(sids <- set_names(levels(sce$sample_id)))

#以匹配样本ID的因子级别排序，对单个细胞元数据进行重新排序
m <- match(sids,sce$sample_id)
n_cells <- as.numeric(table(sce$sample_id))
(ei <- data.frame(colData(sce)[m,],
                  n_cells,row.names = NULL) %>%
    select(-"cluster_id"))



library(scater)
library(Seurat)
library(tidyverse)
library(cowplot)
library(Matrix.utils)
library(edgeR)
library(dplyr)
library(magrittr)
library(Matrix)
library(purrr)
library(reshape2)
library(S4Vectors)
library(tibble)
library(SingleCellExperiment)
library(pheatmap)
library(apeglm)
library(png)
library(DESeq2)
library(RColorBrewer)
library(ggrepel)

assays(sce)
dim(counts(sce))
counts(sce)[1:6,1:6]

dim(colData(sce))
head(colData(sce))

#count aggregation to sample level
groups <- colData(sce)[,c("cluster_id","sample_id")]

pb <- aggregate.Matrix(t(counts(sce)),groupings = groups,fun = "sum")

class(pb)
dim(pb)
pb[1:6,1:6]

#确定每种细胞类型存在哪些样本
splitf <- sapply(stringr::str_split(rownames(pb), 
                                    pattern = "_",  
                                    n = 2), 
                 `[`, 1)

pb <- split.data.frame(pb, 
                       factor(splitf)) %>%
  lapply(function(u) 
    set_colnames(t(u), 
                 stringr::str_extract(rownames(u), "(?<=_)[:alnum:]+")))

class(pb)

str(pb)
#检查每个集群的每个样本的计数
options(width = 100)
table(sce$cluster_id, sce$sample_id)


#为每个细胞类型群集创建一个样本名称组合向量
get_sample_ids <- function(x){
  pb[[x]] %>%
    colnames()
}

de_samples <- map(1:length(kids), get_sample_ids) %>%
  unlist()

#获得与向量中的每个样本相对应的群集ID
samples_list <- map(1:length(kids), get_sample_ids)

get_cluster_ids <- function(x){
  rep(names(pb)[x], 
      each = length(samples_list[[x]]))
}

de_cluster_ids <- map(1:length(kids), get_cluster_ids) %>%
  unlist()


#使用群集ID和相对应的样本ID创建一个数据框，把状态信息合并一起
gg_df <- data.frame(cluster_id = de_cluster_ids,
                    sample_id = de_samples)

gg_df <- left_join(gg_df, ei[, c("sample_id", "group_id")]) 


metadata <- gg_df %>%
  dplyr::select(cluster_id, sample_id, group_id) 

metadata    

#查看群集细胞类型ID
clusters <- unique(metadata$cluster_id)
clusters

clusters[3]

#选择细胞运行DE分析，可以仅将元数据和计数设置为B细胞
cluster_metadata <- metadata[which(metadata$cluster_id == clusters[3]), ]
head(cluster_metadata)
rownames(cluster_metadata) <- cluster_metadata$sample_id
head(cluster_metadata)
counts <- pb[[clusters[3]]]
cluster_counts <- data.frame(counts[, which(colnames(counts) %in% rownames(cluster_metadata))])
all(rownames(cluster_metadata) == colnames(cluster_counts)) 

cluster_counts1 <- round(cluster_counts)

#创建DESeq2对象：
dds <- DESeqDataSetFromMatrix(cluster_counts1, 
                              colData = cluster_metadata, 
                              design = ~ group_id)

#归一化和rlog转换原始计数
rld <- rlog(dds, blind=TRUE)

DESeq2::plotPCA(rld, intgroup = "group_id")

#层次树
rld_mat <- assay(rld)
rld_cor <- cor(rld_mat)
pheatmap(rld_cor, annotation = cluster_metadata[, c("group_id"), drop=F])

dds <- DESeq(dds)
plotDispEsts(dds)

levels(cluster_metadata$group_id)[2]
levels(cluster_metadata$group_id)[1]

contrast <- c("group_id", levels(cluster_metadata$group_id)[2], levels(cluster_metadata$group_id)[1])

# resultsNames(dds)
res <- results(dds, 
               contrast = contrast,
               alpha = 0.05)

resApe <-lfcShrink(dds, coef=2,type="apeglm")


#所有基因结果表
res_tbl <- res %>%
  data.frame() %>%
  rownames_to_column(var="gene") %>%
  as_tibble()
res_tbl

#显著基因结果表
padj_cutoff <- 0.05

sig_res <- dplyr::filter(res_tbl, padj < padj_cutoff) %>%
  dplyr::arrange(padj)

sig_res

#top20最显著的基因归一化表达散点图：
## ggplot of top genes
normalized_counts <- counts(dds, 
                            normalized = TRUE)

## Order results by padj values
top20_sig_genes <- sig_res %>%
  dplyr::arrange(padj) %>%
  dplyr::pull(gene) %>%
  head(n=20)


top20_sig_norm <- data.frame(normalized_counts) %>%
  rownames_to_column(var = "gene") %>%
  dplyr::filter(gene %in% top20_sig_genes)

gathered_top20_sig <- top20_sig_norm %>%
  gather(colnames(top20_sig_norm)[2:length(colnames(top20_sig_norm))], key = "samplename", value = "normalized_counts")

gathered_top20_sig <- inner_join(ei[, c("sample_id", "group_id" )], gathered_top20_sig, by = c("sample_id" = "samplename"))

## plot using ggplot2
ggplot(gathered_top20_sig) +
  geom_point(aes(x = gene, 
                 y = normalized_counts, 
                 color = group_id), 
             position=position_jitter(w=0.1,h=0)) +
  scale_y_log10() +
  xlab("Genes") +
  ylab("log10 Normalized Counts") +
  ggtitle("Top 20 Significant DE Genes") +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) + 
  theme(plot.title = element_text(hjust = 0.5))

#利用热图探索显著基因的聚集性
sig_norm <- data.frame(normalized_counts) %>%
  rownames_to_column(var = "gene") %>%
  dplyr::filter(gene %in% sig_res$gene)

pheatmap(sig_norm[,2:length(colnames(sig_norm))],
         color = colorRampPalette(c("#8854d0","#ffffff","#fa8231"))(100),
         legend_breaks = c(-2,0,2),
         cluster_rows = TRUE,
         cluster_cols = FALSE,
         show_rownames = FALSE,
         annotation = cluster_metadata[,c("group_id","cluster_id")],
         border_color = NA,
         fontsize = 10,
         scale = "row",
         fontsize_row = 10,
         height = 20)



#结果的火山图

res_tbl <- na.omit(res_tbl)
cut_off_pvalue <- 0.05
cut_off_logFC <- 1
res_tbl$change <- ifelse(res_tbl$pvalue<cut_off_pvalue & 
                           abs(res_tbl$log2FoldChange)>=0,
                         ifelse(res_tbl$log2FoldChange>0,'Up','Down'),
                         'Stable')

p <- ggplot(#设置数据
  res_tbl,
  aes(x = log2FoldChange,
      y = -log10(pvalue),
      colour = change)) +
  geom_point(alpha = 0.4,size = 3.5)+
  scale_color_manual(values = c("#546de5","#d2dae2","#ff4757"))+
  #辅助线
  geom_vline(xintercept = c(-1,1),lty=4,col="black",lwd=0.8)+
  geom_hline(yintercept = -log10(cut_off_pvalue),lty=4,col="black",lwd=0.8)+
  #坐标轴
  ggtitle("Volcano plot of CT colonocytes (inflamed vs healthy)")+
  labs(x = "log2(fold change)",
       y = "-log10 (pvalue)")+
  theme_bw()+
  #图例
  theme(plot.title = element_text(hjust = 0.5),
        legend.position = "right",
        legend.title = element_blank())

res_tbl$label <- ifelse(res_tbl$pvalue < cut_off_pvalue & 
                          abs(res_tbl$log2FoldChange) >= 3,
                        as.character(res_tbl$gene),"")

p+geom_text_repel(data = res_tbl,aes(x = res_tbl$log2FoldChange,
                                     y = -log10(res_tbl$pvalue),
                                     label = label),
                  size = 3,box.padding = unit(0.5,"lines"),
                  point.padding = unit(0.8,"lines"),
                  segment.color = "black",
                  show.legend = FALSE)

write.table(sig_res,file="markers.xls",sep="\t",row.names=FALSE,quote=FALSE)


